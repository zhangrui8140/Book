常用的设计模式介绍：单例模式、装饰者模式等
########################################################################################################
是什么 为什么（区别） 怎么使用 场景
-----------------------Lang-----------------------
annotation
invoke
ref
reflect
module(since 9)
------------------
多态的原理
http 和 https 的区别，tcp 握手过程
jvm 垃圾回收算法手写冒泡
手写单例包括多线程下
数据库的悲观锁和乐观锁应用场景。
海量数据过滤，黑名单过滤一个 url。
说一个你对 JVM 优化的实际案例，包括实际步骤和方法
5.通过反射，谈到了方法区，然后，类加载机制？
8.JVM 的调优参数？（-Xmn，-Xms 等具体参数设置）
13.TCP 三次握手，为什么三次握手？
14.JVM 内存分区？（主存，工作内存，堆，栈。。。。）
15.讲一下 GC？
16.为什么要用老年代和新生代？
17.新生代进入老生代的情况？
18.新生代的分区？
java 内存模型
1）讲一下 JVM
2）讲一下 JVM 的分代回收以及具体算法
3）将一下 JVM 的垃圾收集器，G1 和 CMS 有啥区别？
4）讲一下一个变量从产生到结束所经历的过程，讲一下字符串常量的过程？
8）Integer 和 int 有啥区别，integer 中有哪些特殊的函数？
2，网络方面有 osi 七层，tcp/ip 五层，分别有哪些协议及作用
3，爬虫用的什么数据结构
4、tcp 的流量控制和拥塞控制
6，jvm 的垃圾回收机制和垃圾收集器
给你 50 亿行字符串，机器 4G 内存（只能一台机器），找出重复次数最多的那行字符串？
（以行为单位，每行不超过 10 个字符）
设计一个算法，实现两个 10g 大文件在 10m 的内存中将两个大文件中重复的放进第三个
文件
12. JVM，垃圾回收机制，内存划分等
23. 两个 10G 的文件，里面是一些 url，内存只有 1G，如何将这两个文件合并，找到相同
的 url？
 jvm 性能调优都做了什么
. JVM，垃圾回收机制，内存划分等
. SQL 优化，常用的索引？
object 类你知道的方法
hashcode 和 equals
你重写过 hashcode 和 equals 么，要注意什么
Java 的内存模型，垃圾回收
线程池的参数
每个参数解释一遍
然后面试官设置了每个参数，给了是个线程，让描述出完整的线程池执行的流程
Nio 和 IO 有什么区别
Nio 和 aio 的区别
. Java 中的多态
. 为什么要同时重写 hashcode 和 equals
. Hashmap 的原理
. Hashmap 如何变线程安全，每种方式的优缺点
. 垃圾回收机制
. Jvm 的参数你知道的说一下
. 设计模式了解的说一下啊
. 手撕一个单例模式
算法题目
. 手撕算法：反转单链表
. 手撕算法：实现类似微博子结构的数据结构，输入一系列父子关系，输
出一个类似微博评论的父子结构图
. 手写 java 多线程
. 手写 java 的 soeket 编程，服务端和客户端
. 手撕算法： 爬楼梯，写出状态转移方程
 服务器如何负载均衡，有哪些算法，哪个比较好，一致性哈希原理，怎
么避免 DDOS 攻击请求打到少数机器。
. TCP 连接中的三次握手和四次挥手，四次挥手的最后一个 ack 的作用是
什么，为什么要 time wait，为什么是 2msl。
1、从 ConcurrentHashMap 一路问到锁&锁优化->LongAdder->伪共享->缓存行填充->cas 等诸
多技术细节；
-----------------------nio、io、net-----------------------
channels
charset
file
Serialization
------------------
TCP，UDP 区别，为什么可靠和不可靠
一次 HTTP 请求的全过程，包括域名解析、定位主机等
TCP 三次握手
BIO、NIO（如何实现的）、AIO
-----------------------util-----------------------
Collection
concurrent lock
Thread
stream
regex
jar
zip
logging
prefs
function
spi
------------------
HashMap ConcurrentHashMap Hashtable 栈和队列
ArrayList linkedlist ArrayList 是否会越界 hashset

线程池 Runnable Callable Thread 什么情况下使用 Runnable 和 Thread 创建线程，Runnable 和 Callable 的区别
线程方法中的异常如何处理，副线程可以捕获到吗


快速排序说一下过程
红黑树，为什么允许局部不平衡


synchronized volatile 和锁的区别，什么情况下使用 synchronized 和 ReentrantLock



@@Java 线程间怎么实现同步，notify()与 notifyAll()的区别

@@排序算法的复杂度，快速排序非递归实现。

@@list set map 底层使用什么实现的有哪些典型实现

@@hashmap 扩容是怎么扩容的，为什么是 2 的幂

@@concurrenthashmap 为什么线程安全，采用了什么措施应对高并发

@@线程池的参数有什么意义

@@6.synchronized 的实现原理？Volatile 能保证原子性吗？为什么？

@@7.hashmap 和 concurrenthashmap 的 size 方法怎么实现的

@@9.线程池优点，参数，如果我想实现 newSingleThreadPoll，应该怎么配置，构造方法传什么

@@12.线程的五态？转化过程？

@@变着法的问了一大堆线程池的知识 （主要考对应的参数）

@@lock 和 synchronized 的区别

@@reentrantlock 的实现

@@hashmap 和 concurrenthashmap

@@线程安全（阻塞同步，非阻塞同步，无同步）

@@线程池的设计

@@线程池如何做负载均衡

@@如何实现线程调度算法

@@将一下线程安全问题产生的原因？

@@讲一下乐观锁和悲观锁

@@乐观锁是怎么保证一致性的

@@问了冒泡排序，快排，和归并排序及优缺点和优化

@@jdk1.8 concurrenthashmap 的新的特性，有没有看过源码

@@threadlocal 了解吗

@@说一下 hashcode 的作用？HashMap 的底层实现？HashMap 和 HashTable 的区别

@@说一下 concurrentHashMap 和 hashTable 在性能上的区别？以及这种差异形成的原因

@@讲一下堆以及堆排序

@@说一下 B+tree 和二叉搜索树的区别？说一下二叉搜索树和 AVL 树、红黑树之间的差别

@@给你两个文件（字符串形式的）如何找出他们之间的不同地方？

@@你刚刚说的能怎么优化？

@@快速排序的平均复杂多少？最坏情况是什么？（这个题估计就是缓和一下尴尬的气氛）

@@ ArrayList 和 LinkedList 底层

@@ HashMap 及线程安全的 ConcurrentHashMap，以及各自优劣势

@@ Java 如何实现线程安全

@@ Synchronized 和 Lock 哪个更好？

@@ HashMap 中的 get()方法是如何实现的？

@@ HashMap 可以用在哪些场景？

 @@多线程状态图，状态如何流转？

@@ 死锁，死锁原因

@@ 页锁、乐观锁、悲观锁？

@@乐观锁如何保证线程安全？

@@ 用过线程池吗，对应的好处，如何用？

@@ 1000 个多并发线程，10 台机器，每台机器 4 核的，设计线程池大小。

@@ 代码题：两个有序数组，数组中存在重复数字，合并成一个有序数组，去除重复数字。

@@ArrayList 和 LinkedList 底层

@@ HashMap 及线程安全的 ConcurrentHashMap，以及各自优劣势

@@ Java 如何实现线程安全

@@ Synchronized 和 Lock 哪个更好？

@@ HashMap 中的 get()方法是如何实现的？

@@HashMap 可以用在哪些场景？

@@Hashmap 的原理，增删的情况后端数据结构如何位移

@@hashmap 容量为什么是 2 的幂次

@@hashset 的源码


介绍你实践的性能优化案例，以及你的优化思路
垃圾回收算法
JVM 的对象分配在哪个区，Class 对象分配在哪个区
Java 会出现内存溢出吗？什么情况下会出现？
双亲委派模型，为什么这样做？
对象什么情况下进入老年代？
OOM 内存泄漏，什么情况下会出现，如何排查
########################################################################################################

-----------------------math-----------------------

-----------------------security-----------------------

-----------------------text-----------------------

-----------------------time-----------------------
########################################################################################################
@xml
@rmi
@sql
@JNI(Java Native Interface)
@i18n
@instrument(javaagent)

@management




