<beans>

	<bean id="someMessageSource" name="yourMessageSource"
			class="org.springframework.context.support.StaticMessageSource"/>

	<bean class="org.springframework.context.support.ClassPathXmlApplicationContext" lazy-init="true">
		<constructor-arg value="someNonExistentFile.xml"/>
	</bean>

</beans>
------------------------------------------------------------------------------------
ApplicationContext
继承接口
1.BeanFactory ListableBeanFactory HierarchicalBeanFactory bean工厂基本操作
2.EnvironmentCapable 系统环境
3.ApplicationEventPublisher 事件发布 listener
4.ResourcePatternResolver PathMatchingResourcePatternResolver
5.MessageSource
------------------------------------------------------------------------------------
ConfigurableApplicationContext
1.Lifecycle 
2.Closeable

------------------------------------------------------------------------------------
AbstractApplicationContext 继承DefaultResourceLoader 资源加载器

1.DefaultResourceLoader(class)
2.DisposableBean
------------------------------------------------------------------------------------
AbstractRefreshableApplicationContext

------------------------------------------------------------------------------------
AbstractRefreshableConfigApplicationContext （DefaultListableBeanFactory）
1.BeanNameAware
2.InitializingBean
------------------------------------------------------------------------------------
ClassPathXmlApplicationContext
流程
资源加载器初始化
获取Environment 路径处理（placeHolder）
校验Env（必须属性是否存在）
创建DefaultListableBeanFactory 初始化自定义参数
初始化 XmlBeanDefinitionReader loadBeanDefinitions
初始化DefaultListableBeanFactory属性 注册 addBeanPostProcessor ...
加载自定义factory PostProcessors
加载自定义Bean PostProcessors
initMessageSource 注册MessageSource
initApplicationEventMulticaster  注册applicationEventMulticaster
注册监听器 和earlyApplicationEvents 并放置于applicationEventMulticaster
初始化完成DefaultListableBeanFactory LoadTimeWeaverAware
初始化非lazyBean
initLifecycleProcessor
寻找 Lifecycle 继承Bean 
发布事件
关闭
发布关闭事件
Lifecycle 关闭
------------------------------------------------------------
refresh流程

1.prepareRefresh（）
-Initialize any placeholder property sources in the context environment
当前环境placeholder属性初始化

-getEnvironment().validateRequiredProperties()
获取当前环境 校验需要的属性

2.prepareBeanFactory（）
-Configure the factory's standard context characteristics,
such as the context's ClassLoader and post-processors.
初始化BeanFactory 注册ClassLoader post-processors 等

3.postProcessBeanFactory(beanFactory);
-给context子类注册需要的 post-processors 等

4.invokeBeanFactoryPostProcessors(beanFactory)
BeanDefinitionRegistryPostProcessor
// First, invoke the BeanDefinitionRegistryPostProcessors that implement PriorityOrdered.
// Next, invoke the BeanDefinitionRegistryPostProcessors that implement Ordered.
// Finally, invoke all other BeanDefinitionRegistryPostProcessors until no further ones appear.

BeanDefinitionRegistryPostProcessor BeanFactoryPostProcessor 两个接口
BeanFactoryPostProcessor 单独接口
-----------------------------------------------------------------------------
BeanFactoryPostProcessor
// Separate between BeanFactoryPostProcessors that implement PriorityOrdered,Ordered, and the rest.
区分 PriorityOrdered  Ordered  和剩余的
// First, invoke the BeanFactoryPostProcessors that implement PriorityOrdered.
// Next, invoke the BeanFactoryPostProcessors that implement Ordered.

5.registerBeanPostProcessors(beanFactory);
添加 BeanPostProcessorChecker

// Separate between BeanPostProcessors that implement PriorityOrdered,
// Ordered, and the rest.
区分三个PriorityOrdered  Ordered  the rest 
BeanPostProcessors后 
依次注册BeanPostProcessor 
BeanPostProcessor-》

// Finally, re-register all internal BeanPostProcessors.
MergedBeanDefinitionPostProcessor

6.initMessageSource()
初始化messageSource Bean

7.initApplicationEventMulticaster()
注册 默认 SimpleApplicationEventMulticaster 事件广播器

8.onRefresh()
Initialize other special beans in specific context subclasses.

9.registerListeners()
ApplicationEventMulticaster上注册监听Listeners 只做添加
// Do not initialize FactoryBeans here: We need to leave all regular beans
uninitialized to let post-processors apply to them!

10.finishBeanFactoryInitialization(beanFactory)
-ConversionService
Initialize conversion service for this context.

-LoadTimeWeaverAware
Initialize LoadTimeWeaverAware beans early to allow for registering their transformers early.

-preInstantiateSingletons
Instantiate all remaining (non-lazy-init) singletons. 创建Bean 自定义

11.finishRefresh()
initLifecycleProcessor

开始 Propagate refresh to lifecycle processor first.

Publish the final event. new ContextRefreshedEvent

LiveBeansView.registerApplicationContext(this);



