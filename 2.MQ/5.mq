kafka  RocketMQ  RabbitMQ

1.MQ的作用:
解耦  消息发至MQ 由其他系统去订阅消费
异步  降低延迟     
削峰  减少高峰时期对服务器压力。

2.MQ优缺点
系统可用性降低  
系统引入的外部依赖越多，越容易挂掉。万一 MQ 挂了，MQ 一挂，整套系统崩溃

系统复杂度提高  
硬生生加个 MQ 进来，你怎么保证消息没有重复消费？怎么处理消息丢失的情况？怎么保证消息传递的顺序性？

一致性问题
A 系统处理完了直接返回成功了，人都以为你这个请求就成功了；但是问题是，要是 BCD 三个系统那里，BD 两个系统写库成功了，结果 C 系统写库失败了，咋整？你这数据就不一致了。


3.MQ区别
吞吐量  高 kafka  RocketMQ   次 ActiveMQ RabbitMQ

社区活跃度  
按照目前网络上的资料，RabbitMQ 、activeM 、ZeroMQ 三者中，综合来看，RabbitMQ 是首选。 

持久化消息比较
ActiveMq 和RabbitMq 都支持。持久化消息主要是指我们机器在不可抗力因素等情况下挂掉了，消息不会丢失的机制。

综合技术实现 可靠性、灵活的路由、集群、事务、高可用的队列、消息排序、问题追踪、可视化管理工具、插件系统等等。
RabbitMq / Kafka 最好，ActiveMq 次之，ZeroMq 最差

高并发
毋庸置疑，RabbitMQ 最高  高并发高可用的erlang 语言


4.如何保证高可用
RabbitMQ 
因为是基于主从（非分布式）做高可用性的   普通集群模式、镜像集群模式

Kafka 
分布式 基于zookeeper HA

5.如何保证消息不被重复消费？或者说，如何保证消息消费时的幂等性（数据一致）
数据库的唯一键
数据不重复插入 redis 加入 消息id 控制  查询redis 查看是否消费

6.MQ顺序性
RocketMQ  MessageQueueSelector实现的算法来选择一个队列  多队列 1-1消费

7.MQ事务性
大事务 = 小事务 + 异步
RocketMQ  预通知（检查）  本地事务   事务成功 修改预通知（是否发送异步消息） 
？考虑zookeeper 分布式协调 

8.数据丢失
生产者中丢失：

RabbitMQ  开启 RabbitMQ 事务channel.txSelect 太耗性能

confirm模式 生产者那里设置开启confirm模式之后，你每次写的消息都会分配一个唯一的 id，然后如果写入了 RabbitMQ 中，RabbitMQ 会给你回传一个ack消息，告诉你说这个消息 ok 了

MQ中丢失：
开启 RabbitMQ 的持久化  持久化 queue 的元数据   消息设置为持久化 同步磁盘


消费端丢失 关闭 RabbitMQ 的自动ack

9.如何解决消息队列的延时以及过期失效问题？消息队列满了以后该怎么处理？有几百万消息持续积压几小时，说说怎么解决？
消息积压 扩容


10.设计MQ思路
扩容 分布式
磁盘同步 避免数据丢失
高可用 分布式

